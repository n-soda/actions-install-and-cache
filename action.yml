name: install/cache files

inputs:
  target:    { required: true,  type: string }
  command:   { required: true,  type: string }
  directory: { required: true,  type: string }
  cache:     { required: false, type: string, default: yes }
  cache-gen: { required: false, type: string, default: v1 }
  key:       { required: false, type: string }

outputs:
  cache-hit:
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: composite
  steps:

    - id: setup
      shell: bash
      run: |
        case "${{ inputs.cache }}" in
            yes|workflow) cache="${{ inputs.cache }}" ;;
            *)            cache=no ;;
        esac
        target="${{ inputs.target }}"
        command="${{ inputs.command }}"
        directory="${{ inputs.directory }}"
        gen="${{ inputs.cache-gen }}"
        given_key="${{ inputs.key }}"
        md5    /dev/null > /dev/null 2>&1 && md5=md5
        md5sum /dev/null > /dev/null 2>&1 && md5=md5sum
        test "md5" != ''
        hash=$( (uname -mrsv ; echo $command $target $directory) | $md5 | awk '{print $1}' )
        key="${hash}${given_key:+-$given_key}${gen:+-$gen}"
        [ "$cache" == 'workflow' ] && key="$key-${{ github.run_id }}"
        cat << END
        ::set-output name=cache::$cache
        ::set-output name=archive::$HOME/archive-$hash.tz
        ::set-output name=key::$key
        ::set-output name=epoch::/tmp/epoch_file
        END

    - id: cache
      if: steps.setup.outputs.cache != 'no'
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup.outputs.archive }}
        key:  ${{ steps.setup.outputs.key }}

    - id: extract
      if: steps.setup.outputs.cache != 'no' && steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        archive="${{ steps.setup.outputs.archive }}"
        ls -l $archive
        if [ -s $archive ]
        then
            sudo tar -C / -xvzf $archive
        else
            echo "$archive is empty"
        fi

    - id: install
      if: steps.setup.outputs.cache == 'no' || steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        epoch="${{ steps.setup.outputs.epoch }}"
        : ${epoch:?}
        test "${{ inputs.command }}" != ''
        test "${{ inputs.target }}" != ''
        touch $epoch && touch -A -01 $epoch &> /dev/null || sleep 1
        ls -l $epoch
        ${{ inputs.command }} ${{ inputs.target }}

    - id: archive
      if: steps.setup.outputs.cache != 'no' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        epoch="${{ steps.setup.outputs.epoch }}"
        archive="${{ steps.setup.outputs.archive }}"
        directory="${{ inputs.directory }}"
        : ${epoch:?} ${archive:?} ${directory:?}
        set $directory
        directory=
        for dir in $*
        do
            [ -d "$dir" ] && [[ "$dir" =~ ^/ ]] && directory="$directory $dir"
        done
        list=/tmp/updated-list
        if [ -f $epoch ]
        then
            cd /
            time sudo \
                find $directory \
                     -not -type d \( -cnewer $epoch -o -newer $epoch \) -print > $list
            if [ -s $list ]
            then
                time sudo tar -cvzf $archive -T $list
                ls -l $archive
            else
                echo "no updated file found."
                touch $archive
            fi
        else
            echo $epoch not found
        fi
